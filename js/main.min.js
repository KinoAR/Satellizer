/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);

/***/ },
/* 1 */
/***/ function(module, exports) {

	class ElapsedTimer extends React.Component {
	  render() {
	    return React.createElement(
	      "h3",
	      null,
	      " Elapsed Time: ",
	      this.props.date.toString()
	    );
	  }
	}
	
	function tick() {
	  ReactDOM.render(React.createElement(ElapsedTimer, { date: new moment().format("hh:mm:ss") }), document.getElementById('elapsedTimer'));
	}
	
	setInterval(tick, 1000);

/***/ },
/* 2 */
/***/ function(module, exports) {

	class TimerList extends React.Component {
	  render() {
	    let timers = ["Time1", "Time2", "Time3", "Time4"];
	    return React.createElement("ul", { className: "timerList" }, timers.map((timer, index) => {
	      console.log(timer);
	      return React.createElement("li", { key: index }, React.createElement("div", { className: "timerItem" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-xs-4" }, "Timer Button"), React.createElement("div", { className: "col-xs-8" }, React.createElement("div", { className: "col-xs-12" }, "Task Description"), React.createElement("div", { className: "col-xs-12" }, moment().format("hh:mm:ss"))))));
	    }));
	  }
	}
	
	ReactDOM.render(React.createElement(TimerList, null), document.getElementById("Timers"));

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTY0OTFmMmFkOWVlMThjNWIzYWUiLCJ3ZWJwYWNrOi8vLy4vanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9qcy9lbGFwc2VkVGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdGltZXJzLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJFbGFwc2VkVGltZXIiLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsInByb3BzIiwiZGF0ZSIsInRvU3RyaW5nIiwidGljayIsIlJlYWN0RE9NIiwibW9tZW50IiwiZm9ybWF0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNldEludGVydmFsIiwiVGltZXJMaXN0IiwidGltZXJzIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIm1hcCIsInRpbWVyIiwiaW5kZXgiLCJjb25zb2xlIiwibG9nIiwia2V5Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQSxvQkFBQUEsQ0FBUSxDQUFSO0FBQ0Esb0JBQUFBLENBQVEsQ0FBUixFOzs7Ozs7QUNEQSxPQUFNQyxZQUFOLFNBQTJCQyxNQUFNQyxTQUFqQyxDQUEyQztBQUN6Q0MsWUFBUztBQUNQLFlBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBb0IsWUFBS0MsS0FBTCxDQUFXQyxJQUFYLENBQWdCQyxRQUFoQjtBQUFwQixNQURGO0FBR0Q7QUFMd0M7O0FBUTNDLFVBQVNDLElBQVQsR0FBZ0I7QUFDZEMsWUFBU0wsTUFBVCxDQUFnQixvQkFBQyxZQUFELElBQWMsTUFBTSxJQUFJTSxNQUFKLEdBQWFDLE1BQWIsQ0FBb0IsVUFBcEIsQ0FBcEIsR0FBaEIsRUFDRkMsU0FBU0MsY0FBVCxDQUF3QixjQUF4QixDQURFO0FBRUQ7O0FBRURDLGFBQVlOLElBQVosRUFBa0IsSUFBbEIsRTs7Ozs7O0FDYkEsT0FBTU8sU0FBTixTQUF3QmIsTUFBTUMsU0FBOUIsQ0FBd0M7QUFDdENDLFlBQVM7QUFDUCxTQUFJWSxTQUFTLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsT0FBbkIsRUFBNEIsT0FBNUIsQ0FBYjtBQUNBLFlBQU9kLE1BQU1lLGFBQU4sQ0FDTCxJQURLLEVBRUwsRUFBRUMsV0FBVyxXQUFiLEVBRkssRUFHTEYsT0FBT0csR0FBUCxDQUFXLENBQUNDLEtBQUQsRUFBUUMsS0FBUixLQUFrQjtBQUMzQkMsZUFBUUMsR0FBUixDQUFZSCxLQUFaO0FBQ0EsY0FBT2xCLE1BQU1lLGFBQU4sQ0FDTCxJQURLLEVBRUwsRUFBRU8sS0FBS0gsS0FBUCxFQUZLLEVBR0xuQixNQUFNZSxhQUFOLENBQ0UsS0FERixFQUVFLEVBQUVDLFdBQVcsV0FBYixFQUZGLEVBR0VoQixNQUFNZSxhQUFOLENBQ0UsS0FERixFQUVFLEVBQUVDLFdBQVcsS0FBYixFQUZGLEVBR0VoQixNQUFNZSxhQUFOLENBQ0UsS0FERixFQUVFLEVBQUVDLFdBQVcsVUFBYixFQUZGLEVBR0UsY0FIRixDQUhGLEVBUUVoQixNQUFNZSxhQUFOLENBQ0UsS0FERixFQUVFLEVBQUVDLFdBQVcsVUFBYixFQUZGLEVBR0VoQixNQUFNZSxhQUFOLENBQ0UsS0FERixFQUVFLEVBQUVDLFdBQVcsV0FBYixFQUZGLEVBR0Usa0JBSEYsQ0FIRixFQVFFaEIsTUFBTWUsYUFBTixDQUNFLEtBREYsRUFFRSxFQUFFQyxXQUFXLFdBQWIsRUFGRixFQUdFUixTQUFTQyxNQUFULENBQWdCLFVBQWhCLENBSEYsQ0FSRixDQVJGLENBSEYsQ0FISyxDQUFQO0FBK0JELE1BakNELENBSEssQ0FBUDtBQXNDRDtBQXpDcUM7O0FBNEN4Q0YsVUFBU0wsTUFBVCxDQUFnQkYsTUFBTWUsYUFBTixDQUFvQkYsU0FBcEIsRUFBK0IsSUFBL0IsQ0FBaEIsRUFBc0RILFNBQVNDLGNBQVQsQ0FBd0IsUUFBeEIsQ0FBdEQsRSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgNTY0OTFmMmFkOWVlMThjNWIzYWVcbiAqKi8iLCJyZXF1aXJlKCcuL2VsYXBzZWRUaW1lci5qcycpO1xyXG5yZXF1aXJlKCcuL3RpbWVycy5qcycpO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2pzL21haW4uanNcbiAqKi8iLCJjbGFzcyBFbGFwc2VkVGltZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxoMz4gRWxhcHNlZCBUaW1lOiB7dGhpcy5wcm9wcy5kYXRlLnRvU3RyaW5nKCl9PC9oMz5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB0aWNrKCkge1xyXG4gIFJlYWN0RE9NLnJlbmRlcig8RWxhcHNlZFRpbWVyIGRhdGU9e25ldyBtb21lbnQoKS5mb3JtYXQoXCJoaDptbTpzc1wiKX0gLz4sXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbGFwc2VkVGltZXInKSk7XHJcbn1cclxuXHJcbnNldEludGVydmFsKHRpY2ssIDEwMDApO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2pzL2VsYXBzZWRUaW1lci5qc1xuICoqLyIsImNsYXNzIFRpbWVyTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBsZXQgdGltZXJzID0gW1wiVGltZTFcIiwgXCJUaW1lMlwiLCBcIlRpbWUzXCIsIFwiVGltZTRcIl07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcInVsXCIsXG4gICAgICB7IGNsYXNzTmFtZTogXCJ0aW1lckxpc3RcIiB9LFxuICAgICAgdGltZXJzLm1hcCgodGltZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRpbWVyKTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIHsga2V5OiBpbmRleCB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwidGltZXJJdGVtXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJvd1wiIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjb2wteHMtNFwiIH0sXG4gICAgICAgICAgICAgICAgXCJUaW1lciBCdXR0b25cIlxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29sLXhzLThcIiB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29sLXhzLTEyXCIgfSxcbiAgICAgICAgICAgICAgICAgIFwiVGFzayBEZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNvbC14cy0xMlwiIH0sXG4gICAgICAgICAgICAgICAgICBtb21lbnQoKS5mb3JtYXQoXCJoaDptbTpzc1wiKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG5SZWFjdERPTS5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChUaW1lckxpc3QsIG51bGwpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIlRpbWVyc1wiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DOlxcVXNlcnNcXEtpeWljXFxEb2N1bWVudHNcXERldmVsb3BtZW50IFByb2plY3RzXFxTYXRlbGxpemVyXFxqc1xcdGltZXJzLmpzLm1hcFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vanMvdGltZXJzLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==